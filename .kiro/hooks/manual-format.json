{
  "name": "Formatear CÃ³digo Manualmente",
  "description": "Formatea el archivo actual cuando lo solicites manualmente",
  "trigger": {
    "type": "manual",
    "buttonText": "ðŸŽ¨ Formatear CÃ³digo",
    "buttonTooltip": "Formatea y mejora la legibilidad del cÃ³digo actual"
  },
  "actions": [
    {
      "type": "agent_execution",
      "prompt": "Formatea y optimiza el cÃ³digo del archivo actual para mÃ¡xima legibilidad y siguiendo las mejores prÃ¡cticas:\n\n## Formateo General\n- âœ… IndentaciÃ³n consistente (2 espacios)\n- âœ… Espaciado apropiado entre operadores\n- âœ… LÃ­neas no muy largas (mÃ¡ximo 80-100 caracteres)\n- âœ… Punto y coma consistente\n\n## React/JavaScript\n- âœ… Imports organizados (externos primero, luego internos)\n- âœ… Destructuring cuando sea apropiado\n- âœ… Arrow functions vs function declarations consistente\n- âœ… Props organizadas y con tipos si es TypeScript\n\n## Tailwind CSS\n- âœ… Clases organizadas por categorÃ­a (layout, spacing, colors, etc.)\n- âœ… Usar clsx() o cn() para clases condicionales\n- âœ… Responsive design claro\n\n## Comentarios y DocumentaciÃ³n\n- âœ… JSDoc para funciones complejas\n- âœ… Comentarios explicativos donde sea necesario\n- âœ… TODO/FIXME marcados claramente\n\n## Nombres y Estructura\n- âœ… Variables y funciones con nombres descriptivos\n- âœ… Componentes bien estructurados\n- âœ… LÃ³gica separada de la presentaciÃ³n\n\nSolo haz cambios que mejoren realmente la legibilidad. MantÃ©n la funcionalidad exactamente igual.",
      "context": {
        "includeActiveFile": true,
        "includeSteering": true
      }
    }
  ],
  "enabled": true,
  "autoApprove": false
}